// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stats_freq
List stats_freq(CharacterVector& vector, std::string sep);
RcppExport SEXP _GWLD_stats_freq(SEXP vectorSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(stats_freq(vector, sep));
    return rcpp_result_gen;
END_RCPP
}
// recode
Rcpp::IntegerVector recode(CharacterVector& vector, std::string sep);
RcppExport SEXP _GWLD_recode(SEXP vectorSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(recode(vector, sep));
    return rcpp_result_gen;
END_RCPP
}
// code_Mat
arma::Mat<int> code_Mat(CharacterMatrix& Matrix, std::string sep);
RcppExport SEXP _GWLD_code_Mat(SEXP MatrixSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type Matrix(MatrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(code_Mat(Matrix, sep));
    return rcpp_result_gen;
END_RCPP
}
// read_bed
arma::Mat<int> read_bed(std::string bedfile, int nSample);
RcppExport SEXP _GWLD_read_bed(SEXP bedfileSEXP, SEXP nSampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedfile(bedfileSEXP);
    Rcpp::traits::input_parameter< int >::type nSample(nSampleSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bed(bedfile, nSample));
    return rcpp_result_gen;
END_RCPP
}
// read_vcf
Rcpp::CharacterMatrix read_vcf(std::string filename, std::string genotype);
RcppExport SEXP _GWLD_read_vcf(SEXP filenameSEXP, SEXP genotypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type genotype(genotypeSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vcf(filename, genotype));
    return rcpp_result_gen;
END_RCPP
}
// RMIC
double RMIC(arma::Col<int>& g1, arma::Col<int>& g2);
RcppExport SEXP _GWLD_RMIC(SEXP g1SEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(RMIC(g1, g2));
    return rcpp_result_gen;
END_RCPP
}
// RMIC_Mat
arma::Mat<double> RMIC_Mat(arma::Mat<int>& geno012, int cores);
RcppExport SEXP _GWLD_RMIC_Mat(SEXP geno012SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(RMIC_Mat(geno012, cores));
    return rcpp_result_gen;
END_RCPP
}
// MIC
double MIC(arma::Col<int>& g1, arma::Col<int>& g2);
RcppExport SEXP _GWLD_MIC(SEXP g1SEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(MIC(g1, g2));
    return rcpp_result_gen;
END_RCPP
}
// MIC_Mat
arma::Mat<double> MIC_Mat(arma::Mat<int>& geno012, int cores);
RcppExport SEXP _GWLD_MIC_Mat(SEXP geno012SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(MIC_Mat(geno012, cores));
    return rcpp_result_gen;
END_RCPP
}
// LDC
double LDC(arma::Col<int>& g1, arma::Col<int>& g2, std::string method);
RcppExport SEXP _GWLD_LDC(SEXP g1SEXP, SEXP g2SEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< arma::Col<int>& >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(LDC(g1, g2, method));
    return rcpp_result_gen;
END_RCPP
}
// LDC_Mat
arma::Mat<double> LDC_Mat(arma::Mat<int>& geno012, std::string method, int cores);
RcppExport SEXP _GWLD_LDC_Mat(SEXP geno012SEXP, SEXP methodSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(LDC_Mat(geno012, method, cores));
    return rcpp_result_gen;
END_RCPP
}
// gwld
arma::Mat<double> gwld(arma::Mat<int>& geno012, std::string method, int thread);
RcppExport SEXP _GWLD_gwld(SEXP geno012SEXP, SEXP methodSEXP, SEXP threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type thread(threadSEXP);
    rcpp_result_gen = Rcpp::wrap(gwld(geno012, method, thread));
    return rcpp_result_gen;
END_RCPP
}
// decay
CharacterMatrix decay(arma::Mat<double>& m, CharacterMatrix& snpinfo, int maxdist);
RcppExport SEXP _GWLD_decay(SEXP mSEXP, SEXP snpinfoSEXP, SEXP maxdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type m(mSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type snpinfo(snpinfoSEXP);
    Rcpp::traits::input_parameter< int >::type maxdist(maxdistSEXP);
    rcpp_result_gen = Rcpp::wrap(decay(m, snpinfo, maxdist));
    return rcpp_result_gen;
END_RCPP
}
// calc_decay
CharacterMatrix calc_decay(arma::Mat<int>& geno012, CharacterMatrix& snpinfo, std::string method, int thread, int maxdist);
RcppExport SEXP _GWLD_calc_decay(SEXP geno012SEXP, SEXP snpinfoSEXP, SEXP methodSEXP, SEXP threadSEXP, SEXP maxdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type snpinfo(snpinfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type thread(threadSEXP);
    Rcpp::traits::input_parameter< int >::type maxdist(maxdistSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_decay(geno012, snpinfo, method, thread, maxdist));
    return rcpp_result_gen;
END_RCPP
}
// calc_circos
CharacterMatrix calc_circos(arma::Mat<int>& geno012, CharacterMatrix& snpinfo, std::string method, int thread, double threshold);
RcppExport SEXP _GWLD_calc_circos(SEXP geno012SEXP, SEXP snpinfoSEXP, SEXP methodSEXP, SEXP threadSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type geno012(geno012SEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type snpinfo(snpinfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type thread(threadSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_circos(geno012, snpinfo, method, thread, threshold));
    return rcpp_result_gen;
END_RCPP
}
// circos
CharacterMatrix circos(arma::Mat<double>& m, CharacterMatrix& snpinfo, double threshold);
RcppExport SEXP _GWLD_circos(SEXP mSEXP, SEXP snpinfoSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type m(mSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type snpinfo(snpinfoSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(circos(m, snpinfo, threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GWLD_stats_freq", (DL_FUNC) &_GWLD_stats_freq, 2},
    {"_GWLD_recode", (DL_FUNC) &_GWLD_recode, 2},
    {"_GWLD_code_Mat", (DL_FUNC) &_GWLD_code_Mat, 2},
    {"_GWLD_read_bed", (DL_FUNC) &_GWLD_read_bed, 2},
    {"_GWLD_read_vcf", (DL_FUNC) &_GWLD_read_vcf, 2},
    {"_GWLD_RMIC", (DL_FUNC) &_GWLD_RMIC, 2},
    {"_GWLD_RMIC_Mat", (DL_FUNC) &_GWLD_RMIC_Mat, 2},
    {"_GWLD_MIC", (DL_FUNC) &_GWLD_MIC, 2},
    {"_GWLD_MIC_Mat", (DL_FUNC) &_GWLD_MIC_Mat, 2},
    {"_GWLD_LDC", (DL_FUNC) &_GWLD_LDC, 3},
    {"_GWLD_LDC_Mat", (DL_FUNC) &_GWLD_LDC_Mat, 3},
    {"_GWLD_gwld", (DL_FUNC) &_GWLD_gwld, 3},
    {"_GWLD_decay", (DL_FUNC) &_GWLD_decay, 3},
    {"_GWLD_calc_decay", (DL_FUNC) &_GWLD_calc_decay, 5},
    {"_GWLD_calc_circos", (DL_FUNC) &_GWLD_calc_circos, 5},
    {"_GWLD_circos", (DL_FUNC) &_GWLD_circos, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GWLD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
